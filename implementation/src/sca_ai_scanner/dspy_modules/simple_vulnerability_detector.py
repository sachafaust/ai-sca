"""
Simple DSPy VulnerabilityDetector for demonstration.
Works with current DSPy 3.0.1 API.
"""

import dspy
from typing import List, Dict, Any, Optional
import json
import logging

from ..core.models import Package

logger = logging.getLogger(__name__)


class VulnerabilitySignature(dspy.Signature):
    """Simple signature for vulnerability detection."""
    
    package_name: str = dspy.InputField(desc="Package name")
    package_version: str = dspy.InputField(desc="Package version") 
    ecosystem: str = dspy.InputField(desc="Package ecosystem")
    
    vulnerabilities: str = dspy.OutputField(desc="JSON list of vulnerabilities")
    confidence: float = dspy.OutputField(desc="Confidence score 0-1")
    reasoning: str = dspy.OutputField(desc="Detection reasoning")


class SimpleVulnerabilityDetector(dspy.Module):
    """Simple DSPy vulnerability detector."""
    
    def __init__(self):
        super().__init__()
        self.predictor = dspy.ChainOfThought(VulnerabilitySignature)
    
    def detect(self, package: Package) -> Dict[str, Any]:
        """Detect vulnerabilities for a package.
        
        Args:
            package: Package to analyze
            
        Returns:
            Detection results
        """
        try:
            # Run prediction
            result = self.predictor(
                package_name=package.name,
                package_version=package.version,
                ecosystem=package.ecosystem
            )
            
            # Parse results
            vulnerabilities = []
            if hasattr(result, 'vulnerabilities') and result.vulnerabilities:
                try:
                    vulnerabilities = json.loads(result.vulnerabilities)
                except:
                    vulnerabilities = []
            
            confidence = 0.8
            if hasattr(result, 'confidence'):
                try:
                    confidence = float(result.confidence)
                except:
                    confidence = 0.8
            
            reasoning = ""
            if hasattr(result, 'reasoning'):
                reasoning = str(result.reasoning)
            
            return {
                'vulnerabilities': vulnerabilities,
                'confidence': max(0.0, min(1.0, confidence)),
                'reasoning': reasoning
            }
            
        except Exception as e:
            logger.error(f"Detection failed for {package.name}: {e}")
            return {
                'vulnerabilities': [],
                'confidence': 0.0,
                'reasoning': f"Detection failed: {str(e)}"
            }
    
    def forward(self, package_name: str, package_version: str, ecosystem: str):
        """Forward method for DSPy."""
        return self.predictor(
            package_name=package_name,
            package_version=package_version,
            ecosystem=ecosystem
        )


def create_simple_detector() -> SimpleVulnerabilityDetector:
    """Create a simple detector for testing.
    
    Returns:
        Simple vulnerability detector
    """
    return SimpleVulnerabilityDetector()